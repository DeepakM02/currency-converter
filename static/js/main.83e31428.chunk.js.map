{"version":3,"sources":["constant.js","App.js","serviceWorker.js","index.js"],"names":["constant","App","useState","fromCurrencyValue","setFromCurrency","toCurrencyValue","setToCurrency","fromCountry","setFromCountry","toCountry","setToCountry","convertedText","setText","graphData","setGraphData","useEffect","convertCurrency","fetch","then","res","json","response","convertedValue","rates","value","toFixed","changeResultText","getHistorialRates","catch","err","console","log","fromC","currencyList","filter","e","abbr","name","toC","text","today","Date","year","getFullYear","month","getMonth","day","getDate","specialLabel","data","Object","entries","map","key","axes","useMemo","primary","type","position","series","React","showPoints","className","onChange","target","placeholder","currency","index","disabled","onClick","style","width","height","display","textAlign","tooltip","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.83e31428.chunk.js","sourcesContent":["export const constant = {\n    // Endpoint\n    base_url : \"https://api.exchangeratesapi.io\"\n}","import React, { useState, useEffect, useMemo } from 'react';\nimport './App.css';\nimport currencyList from './currencyList.json';\nimport { constant } from './constant';\nimport { Chart } from 'react-charts'\n\nconst App = () => {\n  const [fromCurrencyValue, setFromCurrency] = useState(1);\n  const [toCurrencyValue, setToCurrency] = useState(0);\n  const [fromCountry, setFromCountry] = useState('USD');\n  const [toCountry, setToCountry] = useState('INR');\n  const [convertedText, setText] = useState('');\n  const [graphData, setGraphData] = useState('');\n\n  useEffect(() => {\n    convertCurrency();\n  }, [])\n\n  // currency conversion\n  const convertCurrency = () => {\n    let url = constant.base_url + '/latest?base=' + fromCountry + '&&symbols=' + toCountry\n    fetch(url)\n      .then(res => res.json())\n      .then(response => {\n        let convertedValue = response.rates[toCountry];\n        let value = (fromCurrencyValue * convertedValue).toFixed(2)\n        setToCurrency(value)\n        changeResultText(convertedValue);\n        getHistorialRates();\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  // change result after getting converted value \n  const changeResultText = (convertedValue) => {\n    let fromC = currencyList.filter(e => e.abbr === fromCountry)[0].name;\n    let toC = currencyList.filter(e => e.abbr === toCountry)[0].name;\n    let text = `1 ${fromC} = ${convertedValue.toFixed(2)} ${toC}`;\n    setText(text)\n  }\n\n  // get historical rates\n  const getHistorialRates = () => {\n    let today = new Date();\n    var year = today.getFullYear();\n    var month = today.getMonth() + 1;\n    var day = today.getDate();\n    let start_at = (year - 1) + '-' + month + '-' + day;\n    let end_at = year + '-' + month + '-' + day;\n    let url = constant.base_url + '/history?start_at=' + start_at + '&end_at=' + end_at + '&symbols=' + fromCountry + '&base=' + toCountry;\n\n    fetch(url)\n      .then(res => res.json())\n      .then(response => {\n        let graphData = [\n          {\n            specialLabel: 'Historical Rates',\n            data: Object.entries(response.rates).map(([key, value]) => [(new Date(key)), value[fromCountry]])\n          }\n        ]\n        setGraphData(graphData)\n      });\n  }\n\n  // Chart axes config\n  const axes = useMemo(\n    () => [\n      { primary: true, type: 'utc', position: 'bottom' },\n      { type: 'linear', position: 'left' }\n    ],\n    []\n  )\n\n  // Chart axes series\n  const series = React.useMemo(\n    () => ({\n      type: 'bubble',\n      showPoints: false\n    }),\n    []\n  )\n\n  return (\n    <div className=\"App\">\n      <h1>Currency Converter</h1>\n      <div className=\"currency-section\">\n        <input type=\"number\" name=\"fromCurrencyValue\" value={fromCurrencyValue} onChange={e => setFromCurrency(e.target.value)} />\n        <select value={fromCountry} placeholder=\"Please choose from currency\" onChange={e => setFromCountry(e.target.value)}>\n          {currencyList.map((currency, index) => (\n            <option key={index} value={currency.abbr}>{currency.name}</option>\n          ))}\n        </select>\n\n        <select value={toCountry} placeholder=\"Please choose to currency\" onChange={e => setToCountry(e.target.value)}>\n          {currencyList.map((currency, index) => (\n            <option key={index} value={currency.abbr}>{currency.name}</option>\n          ))}\n        </select>\n\n        <button disabled={!fromCurrencyValue || fromCurrencyValue === 'e'} onClick={convertCurrency}>Convert</button>\n      </div>\n      <div className=\"result-section\">\n        {toCurrencyValue ?\n          <h2>{toCurrencyValue} {toCountry}</h2>\n          : null\n        }\n        <h3>{convertedText}</h3>\n      </div>\n\n      {/* Historical Rates Chart  */}\n      {graphData ?\n        <div\n          style={{\n            width: '800px',\n            height: '300px',\n            display: 'inline-block',\n            textAlign: 'center'\n          }}\n        >\n          <Chart\n            data={graphData}\n            axes={axes}\n            series={series}\n            tooltip />\n        </div> : null}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["constant.js","App.js","serviceWorker.js","index.js"],"names":["constant","App","useState","fromCurrency","setFromCurrency","toCurrency","setToCurrency","fromCountry","setFromCountry","toCountry","setToCountry","convertedText","setConvertedText","graphData","setGraphData","axes","useMemo","primary","type","position","series","React","showPoints","useEffect","convertCurrency","url","fetch","then","res","json","response","toCurrencyValue","rates","value","toFixed","changeResultText","getHistorialRates","catch","err","alert","convertedValue","fromC","currencyList","filter","e","abbr","name","toC","text","today","Date","getFullYear","getMonth","getDate","year","month","day","start_at","end_at","getStartAtEndAt","specialLabel","data","Object","entries","map","key","className","min","onKeyDown","includes","preventDefault","onChange","target","placeholder","currency","index","disabled","onClick","style","width","height","display","textAlign","tooltip","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.53e94330.chunk.js","sourcesContent":["export const constant = {\n    // Endpoint\n    base_url : \"https://api.exchangeratesapi.io\"\n}","import React, { useState, useEffect, useMemo } from \"react\";\nimport { Chart } from \"react-charts\";\n\nimport currencyList from \"./currencyList.json\";\nimport { constant } from \"./constant\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [fromCurrency, setFromCurrency] = useState(1);\n  const [toCurrency, setToCurrency] = useState(\"\");\n  const [fromCountry, setFromCountry] = useState(\"USD\");\n  const [toCountry, setToCountry] = useState(\"INR\");\n  const [convertedText, setConvertedText] = useState(\"\");\n  const [graphData, setGraphData] = useState(\"\");\n\n  // Chart axes config\n  const axes = useMemo(\n    () => [\n      { primary: true, type: \"utc\", position: \"bottom\" },\n      { type: \"linear\", position: \"left\" },\n    ],\n    []\n  );\n\n  // Chart axes series\n  const series = React.useMemo(\n    () => ({\n      type: \"bubble\",\n      showPoints: false,\n    }),\n    []\n  );\n\n  useEffect(() => {\n    convertCurrency();\n  }, []);\n\n  // currency conversion\n  const convertCurrency = () => {\n    const url = `${constant.base_url}/latest?base=${fromCountry}&&symbols=${toCountry}`;\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((response) => {\n        const toCurrencyValue = response.rates[toCountry];\n        const value = (fromCurrency * toCurrencyValue).toFixed(2);\n        setToCurrency(`${value} ${toCountry}`);\n        changeResultText(toCurrencyValue);\n        getHistorialRates();\n      })\n      .catch((err) => {\n        alert(err);\n      });\n  };\n\n  const blockInvalidChar = (e) =>\n    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) && e.preventDefault();\n\n  // change result after getting converted value\n  const changeResultText = (convertedValue) => {\n    const fromC = currencyList.filter((e) => e.abbr === fromCountry)[0].name;\n    const toC = currencyList.filter((e) => e.abbr === toCountry)[0].name;\n    const text = `1 ${fromC} = ${convertedValue.toFixed(2)} ${toC}`;\n    setConvertedText(text);\n  };\n\n  const getStartAtEndAt = () => {\n    const today = new Date();\n    const [year, month, day] = [\n      today.getFullYear(),\n      today.getMonth() + 1,\n      today.getDate(),\n    ];\n    const start_at = `${year - 1}-${month}-${day}`;\n    const end_at = `${year}-${month}-${day}`;\n\n    return { start_at, end_at };\n  };\n\n  // get historical rates\n  const getHistorialRates = () => {\n    const { start_at, end_at } = getStartAtEndAt();\n    const url = `${constant.base_url}/history?start_at=${start_at}&end_at=${end_at}&symbols=${fromCountry}&base=${toCountry}`;\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((response) => {\n        const graphData = [\n          {\n            specialLabel: \"Historical Rates\",\n            data: Object.entries(response.rates).map(([key, value]) => [\n              new Date(key),\n              value[fromCountry],\n            ]),\n          },\n        ];\n        setGraphData(graphData);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Currency Converter</h1>\n\n      <div className=\"currency-section\">\n        <input\n          type=\"number\"\n          min={1}\n          name=\"fromCurrency\"\n          value={fromCurrency}\n          onKeyDown={blockInvalidChar}\n          onChange={(e) => setFromCurrency(e.target.value)}\n        />\n        <select\n          name=\"from country\"\n          value={fromCountry}\n          placeholder=\"Please select from currency\"\n          onChange={(e) => setFromCountry(e.target.value)}\n        >\n          {currencyList.map((currency, index) => (\n            <option key={index} value={currency.abbr}>\n              {currency.name}\n            </option>\n          ))}\n        </select>\n\n        <select\n          name=\"to country\"\n          value={toCountry}\n          placeholder=\"Please select to currency\"\n          onChange={(e) => setToCountry(e.target.value)}\n        >\n          {currencyList.map((currency, index) => (\n            <option key={index} value={currency.abbr}>\n              {currency.name}\n            </option>\n          ))}\n        </select>\n\n        <button disabled={!fromCurrency} onClick={convertCurrency}>\n          Convert\n        </button>\n      </div>\n\n      <div className=\"result-section\">\n        {toCurrency ? <h2>{toCurrency}</h2> : null}\n        <h3>{convertedText}</h3>\n      </div>\n\n      {/* Historical Rates Chart  */}\n      {graphData ? (\n        <div\n          style={{\n            width: \"800px\",\n            height: \"300px\",\n            display: \"inline-block\",\n            textAlign: \"center\",\n          }}\n        >\n          <Chart data={graphData} axes={axes} series={series} tooltip />\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}